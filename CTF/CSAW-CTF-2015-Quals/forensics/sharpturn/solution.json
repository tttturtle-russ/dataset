[
    {
        "type": "thought",
        "content": "First extract the file."
    },
    {
        "type": "execution",
        "content": "tar xvf sharpturn.tar.xz && cd sharpturn"
    },
    {
        "type": "thought",
        "content": "The git repo was crushed because of a material glitch. So the file sharp.cpp had some wrong inputs in it. To find the flag, start with:"
    },
    {
        "type": "execution",
        "content": "git fsck"
    },
    {
        "type": "thought",
        "content": "Next, create a python script to make fit the SHA keys. Use the three blobs in order one at the time in the SHA variable of the script and run it."
    },
    {
        "type": "execution",
        "content": "# -*- coding: utf-8 -*-\nimport sys\nimport zlib\nimport hashlib\n\n#SHA = '354ebf392533dce06174f9c8c093036c138935f3'\n#SHA = 'd961f81a588fcfd5e57bbea7e17ddae8a5e61333'\nSHA = 'f8d0839dd728cb9a723e32058dcc386070d5e3b5'\n\nBLOB_NAME = '.git/objects/%s/%s' % (SHA[:2], SHA[2:])\n\ncdata = file(BLOB_NAME).read()\ndata = zlib.decompress(cdata)\ndata = data.replace('Part2: Input 51337:', 'Part2: Input 31337:')\ndata = data.replace('270031727027.', '272031727027.')\n\ndef sha(data):\n  return hashlib.sha1(data).hexdigest()\n\nif sha(data) == SHA:\n  print 'VALID!'\n  sys.exit(0)\n\nfor i in range(len(data)):\n  for c in range(0, 256):\n    new = data[:i] + chr(c) + data[i+1:]\n    if sha(new) == SHA:\n      print 'VALID!', repr(SHA)\n      print repr(new)\n      print new\n      f = file(BLOB_NAME, 'wb')\n      f.write(zlib.compress(new))\n      f.close()\n      sys.exit(0)\n    print 'NOT FOUND!'"
    },
    {
        "type": "thought",
        "content": "Here's the output for the blob 354ebf392533dce06174f9c8c093036c138935f3\n\nVALID! '354ebf392533dce06174f9c8c093036c138935f3'\n'blob 520\\x00#include <iostream>\\n#include <string>\\n#include <algorithm>\\n\\nusing namespace std;\\n\\nint main(int argc, char **argv)\\n{\\n\\t(void)argc; (void)argv; //unused\\n\\n\\tstd::string part1;\\n\\tcout << \"Part1: Enter flag:\" << endl;\\n\\tcin >> part1;\\n\\n\\tint64_t part2;\\n\\tcout << \"Part2: Input 31337:\" << endl;\\n\\tcin >> part2;\\n\\n\\tstd::string part3;\\n\\tcout << \"Part3: Watch this: https://www.youtube.com/watch?v=PBwAxmrE194\" << endl;\\n\\tcin >> part3;\\n\\n\\tstd::string part4;\\n\\tcout << \"Part4: C.R.E.A.M. Get da _____: \" << endl;\\n\\tcin >> part4;\\n\\n\\treturn 0;\\n}\\n\\n'\nHere's the output for the blob d961f81a588fcfd5e57bbea7e17ddae8a5e61333\n\nVALID! 'd961f81a588fcfd5e57bbea7e17ddae8a5e61333'\n'blob 806\\x00#include <iostream>\\n#include <string>\\n#include <algorithm>\\n\\nusing namespace std;\\n\\nint main(int argc, char **argv)\\n{\\n\\t(void)argc; (void)argv; //unused\\n\\n\\tstd::string part1;\\n\\tcout << \"Part1: Enter flag:\" << endl;\\n\\tcin >> part1;\\n\\n\\tint64_t part2;\\n\\tcout << \"Part2: Input 31337:\" << endl;\\n\\tcin >> part2;\\n\\n\\tstd::string part3;\\n\\tcout << \"Part3: Watch this: https://www.youtube.com/watch?v=PBwAxmrE194\" << endl;\\n\\tcin >> part3;\\n\\n\\tstd::string part4;\\n\\tcout << \"Part4: C.R.E.A.M. Get da _____: \" << endl;\\n\\tcin >> part4;\\n\\n\\tuint64_t first, second;\\n\\tcout << \"Part5: Input the two prime factors of the number 272031727027.\" << endl;\\n\\tcin >> first;\\n\\tcin >> second;\\n\\n\\tuint64_t factor1, factor2;\\n\\tif (first < second)\\n\\t{\\n\\t\\tfactor1 = first;\\n\\t\\tfactor2 = second;\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tfactor1 = second;\\n\\t\\tfactor2 = first;\\n\\t}\\n\\n\\treturn 0;\\n}\\n\\n'\nHere's the output for the blob f8d0839dd728cb9a723e32058dcc386070d5e3b5\n\nVALID! 'f8d0839dd728cb9a723e32058dcc386070d5e3b5'\n'blob 1880\\x00#include <iostream>\\n#include <string>\\n#include <algorithm>\\n\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <openssl/sha.h>\\n\\nusing namespace std;\\n\\nstd::string calculate_flag(\\n\\t\\tstd::string &part1, \\n\\t\\tint64_t part2, \\n\\t\\tstd::string &part4,\\n\\t\\tuint64_t factor1,\\n\\t\\tuint64_t factor2)\\n{\\n\\n\\tstd::transform(part1.begin(), part1.end(), part1.begin(), ::tolower);\\n\\tstd::transform(part4.begin(), part4.end(), part4.begin(), ::tolower);\\n\\n\\tSHA_CTX ctx;\\n\\tSHA1_Init(&ctx);\\n\\n\\tunsigned int mod = factor1 % factor2;\\n\\tfor (unsigned int i = 0; i < mod; i+=2)\\n\\t{\\n\\t\\tSHA1_Update(&ctx,\\n\\t\\t\\t\\treinterpret_cast<const unsigned char *>(part1.c_str()),\\n\\t\\t\\t\\tpart1.size());\\n\\t}\\n\\n\\n\\twhile (part2-- > 0)\\n\\t{\\n\\t\\tSHA1_Update(&ctx,\\n\\t\\t\\t\\treinterpret_cast<const unsigned char *>(part4.c_str()),\\n\\t\\t\\t\\tpart1.size());\\n\\t}\\n\\n\\tunsigned char *hash = new unsigned char[SHA_DIGEST_LENGTH];\\n\\tSHA1_Final(hash, &ctx);\\n\\n\\tstd::string rv;\\n\\tfor (unsigned int i = 0; i < SHA_DIGEST_LENGTH; i++)\\n\\t{\\n\\t\\tchar *buf;\\n\\t\\tasprintf(&buf, \"%02x\", hash[i]);\\n\\t\\trv += buf;\\n\\t\\tfree(buf);\\n\\t}\\n\\n\\treturn rv;\\n}\\n\\nint main(int argc, char **argv)\\n{\\n\\t(void)argc; (void)argv; //unused\\n\\n\\tstd::string part1;\\n\\tcout << \"Part1: Enter flag:\" << endl;\\n\\tcin >> part1;\\n\\n\\tint64_t part2;\\n\\tcout << \"Part2: Input 31337:\" << endl;\\n\\tcin >> part2;\\n\\n\\tstd::string part3;\\n\\tcout << \"Part3: Watch this: https://www.youtube.com/watch?v=PBwAxmrE194\" << endl;\\n\\tcin >> part3;\\n\\n\\tstd::string part4;\\n\\tcout << \"Part4: C.R.E.A.M. Get da _____: \" << endl;\\n\\tcin >> part4;\\n\\n\\tuint64_t first, second;\\n\\tcout << \"Part5: Input the two prime factors of the number 272031727027.\" << endl;\\n\\tcin >> first;\\n\\tcin >> second;\\n\\n\\tuint64_t factor1, factor2;\\n\\tif (first < second)\\n\\t{\\n\\t\\tfactor1 = first;\\n\\t\\tfactor2 = second;\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tfactor1 = second;\\n\\t\\tfactor2 = first;\\n\\t}\\n\\n\\tstd::string flag = calculate_flag(part1, part2, part4, factor1, factor2);\\n\\tcout << \"flag{\";\\n\\tcout << flag;\\n\\tcout << \"}\" << endl;\\n\\n\\treturn 0;\\n}\\n\\n'\nSo, to get the flag, the sharp.cpp file needs to have the following:\n\n\"Part2: Input 31337:\"\n\"Part5: Input the two prime factors of the number 272031727027.\"\nReplace and save the file (You can find the fixed and edited sharp.cpp in the repo).\n\nNow, with Wolfram|Alpha, search : prime factors of 272031727027:\n\n31357\n8675311\nNow, compile sharp.cpp and run it to get the flag. (You need the libssl-dev package to use the openssl/sha.h library):"
    },
    {
        "type": "execution",
        "content": "g++ sharp.cpp -L/usr/lib -lssl -lcrypto -o sharp && ./sharp"
    }
]