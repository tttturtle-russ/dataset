[
    {
        "type": "thought",
        "content": "As the description suggests, the program itself just prints a \"encrypted\" flag whilst the \"encryption\" possibly was taking place at compile time:\n```\n676c60677a74326d716c6074325f6c6575347172316773616c6d686e665f68735e6773385e345e3377657379316e327d\n```\n\nAfter some looking around, I figured out that the main function of programs written in D seems to end up as a `_Dmain` symbol.\nAs neither radare2 nor IDA Pro where able to demangle D function names, I've written a small D program which reads strings from stdin and demangles them if possible:"
    },
    {
        "type": "execution",
        "content": "import core.stdc.stdio : stdin;\nimport std.stdio;\nimport std.ascii;\nimport std.demangle;\n\nint main()\n{\nstring buffer;\nbool inword;\nint c;\n\nwhile ((c = fgetc(stdin)) != EOF)\n{\nif (inword)\n{\nif (c == '_' || isAlphaNum(c))\nbuffer ~= cast(char) c;\nelse\n{\ninword = false;\nwrite(demangle(buffer), cast(char) c);\n}\n}\nelse\n{ if (c == '_' || isAlpha(c))\n{\ninword = true;\nbuffer.length = 0;\nbuffer ~= cast(char) c;\n}\nelse\nwrite(cast(char) c);\n}\n}\nif (inword)\nwrite(demangle(buffer));\nreturn 0;\n}"
    },
    {
        "type": "thought",
        "content": "This produces for example the following output:"
    },
    {
        "type": "execution",
        "content": "./demangle_names"
    },
    {
        "type": "thought",
        "content": "In the next step, I searched for functions which contain `deedeedee` in their names. This results in a lot of functions with similar names:"
    },
    {
        "type": "execution",
        "content": "afl~deedeedee"
    },
    {
        "type": "thought",
        "content": "It seemed that these functions are used to encrypt the flag. That's why I was looking if these functions are used somewhere in the binary:"
    },
    {
        "type": "execution",
        "content": "axt @ sym._D9deedeedee21__T3encVAyaa3_313131Z3encFNaNfAyaZAya"
    },
    {
        "type": "thought",
        "content": "Ok, so there is a encrypt function..."
    },
    {
        "type": "execution",
        "content": "pdf | ./demangle_names"
    },
    {
        "type": "thought",
        "content": "This function calls the `enc` functions with incrementing number strings (\"111\", \"222\", \"333\", ..., \"498498498\", \"499499499\").\n\nIf we look at the content the `enc` functions, we'll see that they are all identical, except of using a different string (\"111\", \"222\", etc.). Based on the demangled names, I was able to decompile them approximately as follows:"
    },
    {
        "type": "execution",
        "content": "char[] enc(char[] data, string base) {\nauto len = cast(char) to!int(base.length);\n\nauto c = cycle(base);\nchar[] res;\nforeach (tup; zip(c, data))\n{\nres ~= tup[0] ^ tup[1] ^ len;\n}\nreturn res;\n}"
    },
    {
        "type": "thought",
        "content": "By reversing the function calls, I was able to \"decrypt\" the flag:"
    },
    {
        "type": "execution",
        "content": "import std.range : cycle, zip;\nimport std.conv : to, hexString;\nimport std.stdio;\n\nchar[] enc(char[] data, string base) {\nauto len = cast(char) to!int(base.length);\n\nauto c = cycle(base);\nchar[] res;\nforeach (tup; zip(c, data))\n{\nres ~= tup[0] ^ tup[1] ^ len;\n}\nreturn res;\n}\n\nint main() {\n\nauto data = hexString!\"676c60677a74326d716c6074325f6c6575347172316773616c6d686e665f68735e6773385e345e3377657379316e327d\";\nchar[] res = data.dup;\n\nfor (int i = 499; i >= 0; --i) {\nstring base = to!string(i);\nres = enc(res, base ~ base ~ base);\n}\n\nwriteln(res);\nreturn 0;\n}"
    }
]