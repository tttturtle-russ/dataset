[
    {
        "type": "thought",
        "content": "Given a .nes file and the challenges name lead to the conclusion that it\u2019s a NES ROM. The emulator FCEUX proved to be of great help with it\u2019s inclusion of a debugger and hex editor.\n\nAfter running the ROM and been shown some gibberish text the following password box was shown:\nViewing the memory with the hex editor one could easily find the input data starting at a memory location. I\u2019ll placed a memory read bp there in order to find the subroutine where the validation was done.\n\nHere\u2019s the pseudo code of this function (A at the top is containing the input string element of index Y) :\n\nA=A<<2\nX=A\nA=A<<1\n\nPUSH A\n\nA,X = MEM[3B]\nA=A/2\nX=A\nA=A/2\nMEM[3B] = A\nPOP A\nCLEAR C\nA = A+MEM[3B]\n\nA = XOR MEM[955E+Y]\nMEM[3B] = A\n\nA=A>>3\nX=A\nA=A>>1\n\nA=XOR A,MEM[9576+Y]\nMEM[1E+Y]=A\nY++\nIF Y!=24:\n\tBRANCH TO TOP\n\nY=0\nFAT_LABEL:\nA = MEM[1E+Y]\nIF A == NULL && Y==24:\n\tBranch to good jump\nY++\nIF A == NULL && Y!=24:\n\tjump to FAT_LABEL\nELSE:\n\tGOTO bad jump\nSo to summarize it:\n\nEach character of the inputted data have some operations done on them, then the result of each character operated on must be 0.\n\nOne can create a nice looking keygen for this problem though I didn\u2019t, in the end I just bruteforced each character to be the correct one as one can simply look at the memory to see the result of the operations.\n\nThe correct key was: NOHACK4UXWRATHOFKFUHRERX"
    }
]